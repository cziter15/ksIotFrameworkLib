name: Release new version
on:
  workflow_dispatch:
    inputs:
      new_version:
        description: 'Version to release (use "auto" to auto-increment)'
        required: true
        default: auto
        type: string
permissions:
  contents: write
jobs:
  bump-version-and-release:
    name: Bump version and release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # Fetch full history & tags for proper release notes
      - name: Determine version (auto or manual)
        id: determine-version
        env:
          INPUT_VERSION: ${{ github.event.inputs.new_version }}
        run: |
          set -euo pipefail
          INPUT_VERSION="${INPUT_VERSION}"
          git fetch --tags --quiet || true
          if [ "$INPUT_VERSION" != "auto" ]; then
            CANDIDATE="${INPUT_VERSION}"
          else
            CURRENT="$(git tag --list '[0-9]*.[0-9]*.[0-9]*' | sort -V | tail -n1)"
            if [ -z "$CURRENT" ] && [ -f library.properties ]; then
              PROP_VER=$(grep '^version=' library.properties | cut -d= -f2 || true)
              if [[ "$PROP_VER" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                CURRENT="$PROP_VER"
              fi
            fi
            if [[ ! "$CURRENT" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              CURRENT="1.0.0"
            fi
            IFS='.' read -r MAJ MIN PATCH <<< "$CURRENT"
            if [ "$PATCH" -lt 99 ]; then
              PATCH=$((PATCH+1))
            else
              PATCH=0
              MIN=$((MIN+1))
            fi
            CANDIDATE="${MAJ}.${MIN}.${PATCH}"
          fi
          if [[ ! "$CANDIDATE" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "ERROR: Computed/provided version '$CANDIDATE' is not in MAJOR.MINOR.PATCH format."
            exit 1
          fi
          echo "new_version=$CANDIDATE" >> "$GITHUB_OUTPUT"
      - name: Show chosen version
        env:
          NEW_VERSION: ${{ steps.determine-version.outputs.new_version }}
        run: |
          echo "Chosen new version: $NEW_VERSION"
      - name: Set up Git user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      - name: Ensure version does not already exist
        env:
          NEW_VERSION: ${{ steps.determine-version.outputs.new_version }}
        run: |
          if git rev-parse -q --verify "refs/tags/${NEW_VERSION}" >/dev/null; then
            echo "Tag ${NEW_VERSION} already exists. Aborting."
            exit 1
          fi
      - name: Bump library.properties version
        env:
          NEW_VERSION: ${{ steps.determine-version.outputs.new_version }}
        run: |
          if [ -f library.properties ]; then
            sed -i "s/^version=.*/version=${NEW_VERSION}/" library.properties
          fi
      - name: Bump library.json version
        env:
          NEW_VERSION: ${{ steps.determine-version.outputs.new_version }}
        run: |
          if [ -f library.json ]; then
            jq ".version = \"${NEW_VERSION}\"" library.json > tmp.json && mv tmp.json library.json
          fi
      - name: Commit & push version bump
        env:
          NEW_VERSION: ${{ steps.determine-version.outputs.new_version }}
        run: |
          git add library.properties library.json || true
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Bump version to ${NEW_VERSION}"
            git push
          fi
      - name: Create and push tag
        env:
          NEW_VERSION: ${{ steps.determine-version.outputs.new_version }}
        run: |
          git tag "${NEW_VERSION}"
          git push origin "${NEW_VERSION}"
      - name: Build release notes
        env:
          NEW_VERSION: ${{ steps.determine-version.outputs.new_version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          git fetch --tags || true
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || true)
          if [ -n "$PREV_TAG" ]; then
            RANGE="${PREV_TAG}..HEAD"
          else
            RANGE="--no-merges HEAD"
          fi
          git log $RANGE --pretty=format:'%h %s (%an)' > commits.raw || true
          printf "# Release %s\n\n" "${NEW_VERSION}" > release_notes.md
          for type in feat fix docs chore perf refactor test; do
            if grep -Ei "^(.*: )?${type}(\(.+\))?: " commits.raw >/dev/null 2>&1; then
              header=$(case $type in
                feat) echo "Features";;
                fix) echo "Fixes";;
                docs) echo "Documentation";;
                chore) echo "Chores";;
                perf) echo "Performance";;
                refactor) echo "Refactors";;
                test) echo "Tests";;
                *) echo ""
              esac)
              printf "## %s\n\n" "$header" >> release_notes.md
              grep -Ei "^(.*: )?${type}(\(.+\))?: " commits.raw | sed -E 's/^[0-9a-f]+ //; s/([a-z]+)(\(.+\))?: //I; s/\s+\([^)]+\)$//' | sed 's/^/- /' >> release_notes.md
              echo >> release_notes.md
            fi
          done
          if grep -Eiv "^(.*: )?(feat|fix|docs|chore|perf|refactor|test)(\(.+\))?: " commits.raw >/dev/null 2>&1; then
            printf "## Other changes\n\n" >> release_notes.md
            grep -Eiv "^(.*: )?(feat|fix|docs|chore|perf|refactor|test)(\(.+\))?: " commits.raw | sed -E 's/^[0-9a-f]+ //; s/\s+\([^)]+\)$//' | sed 's/^/- /' >> release_notes.md
            echo >> release_notes.md
          fi
          [ -s release_notes.md ] || echo -e "# Release ${NEW_VERSION}\n\nNo changes detected." > release_notes.md
      - name: Create GitHub Release with notes-file
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_VERSION: ${{ steps.determine-version.outputs.new_version }}
          REPO: ${{ github.repository }}
          SHA: ${{ github.sha }}
        run: |
          echo "${GITHUB_TOKEN}" | gh auth login --with-token >/dev/null 2>&1 || true
          gh release create "${NEW_VERSION}" --notes-file release_notes.md --repo "${REPO}" --target "${SHA}"
