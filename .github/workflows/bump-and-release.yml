name: Release new version
on:
  workflow_dispatch:
    inputs:
      new_version:
        description: 'Version to release'
        required: true
        type: string
permissions:
  contents: write
jobs:
  bump-version-and-release:
    name: Bump version and release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # Fetch full history & tags for proper release notes
      - name: Show current version
        run: |
          echo "Current version is:"
          grep '^version=' library.properties || echo "Not found"
      - name: Set up Git user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      - name: Bump library.properties version
        env:
          NEW_VERSION: ${{ github.event.inputs.new_version }}
        run: |
          sed -i "s/^version=.*/version=${NEW_VERSION}/" library.properties
      - name: Bump library.json version
        env:
          NEW_VERSION: ${{ github.event.inputs.new_version }}
        run: |
          jq ".version = \"${NEW_VERSION}\"" library.json > tmp.json && mv tmp.json library.json
      - name: Commit & push version bump
        env:
          NEW_VERSION: ${{ github.event.inputs.new_version }}
        run: |
          git add library.properties library.json
          git commit -m "Bump version to ${NEW_VERSION}" || echo "No changes to commit"
          git push
      - name: Create and push tag
        env:
          NEW_VERSION: ${{ github.event.inputs.new_version }}
        run: |
          git tag "${NEW_VERSION}"
          git push origin "${NEW_VERSION}"
      - name: Build release notes
        env:
          NEW_VERSION: ${{ github.event.inputs.new_version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          git fetch --tags || true
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || true)
          if [ -n "$PREV_TAG" ]; then
            RANGE="${PREV_TAG}..HEAD"
          else
            RANGE="--no-merges HEAD"
          fi
          git log $RANGE --pretty=format:'%h %s (%an)' > commits.raw
          printf "# Release %s\n\n" "${NEW_VERSION}" > release_notes.md
          for type in feat fix docs chore perf refactor test; do
            if grep -Ei "^(.*: )?${type}(\(.+\))?: " commits.raw >/dev/null 2>&1; then
              header=$(case $type in
                feat) echo "Features";;
                fix) echo "Fixes";;
                docs) echo "Documentation";;
                chore) echo "Chores";;
                perf) echo "Performance";;
                refactor) echo "Refactors";;
                test) echo "Tests";;
              esac)
              printf "## %s\n\n" "$header" >> release_notes.md
              grep -Ei "^(.*: )?${type}(\(.+\))?: " commits.raw \
                | sed -E 's/^[0-9a-f]+ //; s/([a-z]+)(\(.+\))?: //I; s/\s+\([^)]+\)$//' \
                | sed 's/^/- /' >> release_notes.md
              echo >> release_notes.md
            fi
          done
          if grep -Eiv "^(.*: )?(feat|fix|docs|chore|perf|refactor|test)(\(.+\))?: " commits.raw >/dev/null 2>&1; then
            printf "## Other changes\n\n" >> release_notes.md
            grep -Eiv "^(.*: )?(feat|fix|docs|chore|perf|refactor|test)(\(.+\))?: " commits.raw \
              | sed -E 's/^[0-9a-f]+ //; s/\s+\([^)]+\)$//' \
              | sed 's/^/- /' >> release_notes.md
            echo >> release_notes.md
          fi
          [ -s release_notes.md ] || echo -e "# Release ${NEW_VERSION}\n\nNo changes detected." > release_notes.md
      - name: Create GitHub Release with notes-file
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_VERSION: ${{ github.event.inputs.new_version }}
        run: |
          echo "${GITHUB_TOKEN}" | gh auth login --with-token >/dev/null 2>&1 || true
          gh release create "${NEW_VERSION}" \
            --notes-file release_notes.md \
            --repo "${{ github.repository }}" \
            --target "${{ github.sha }}"
