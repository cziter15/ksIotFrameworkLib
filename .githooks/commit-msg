#!/bin/bash
#
# Git commit-msg hook to validate commit messages against the repository format.
# This hook validates that commit messages follow the format: (type) description
# where type is one of: feat, fix, docs, chore, perf, refactor, test
#
# Copyright (c) 2020-2026, Krzysztof Strehlau
# This file is a part of the ksIotFrameworkLib IoT library.
# https://github.com/cziter15/ksIotFrameworkLib

# Color codes for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Valid commit types
VALID_TYPES=("feat" "fix" "docs" "chore" "perf" "refactor" "test")

# Read the commit message from the file
COMMIT_MSG_FILE=$1
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

# Skip validation for merge commits
if grep -q "^Merge" "$COMMIT_MSG_FILE"; then
    exit 0
fi

# Skip validation for revert commits
if grep -q "^Revert" "$COMMIT_MSG_FILE"; then
    exit 0
fi

# Function to check if type is valid
is_valid_type() {
    local type=$1
    for valid_type in "${VALID_TYPES[@]}"; do
        if [ "$type" = "$valid_type" ]; then
            return 0
        fi
    done
    return 1
}

# Extract the type from the commit message
# Match format: (type) description
if [[ $COMMIT_MSG =~ ^(\(([a-z]+)\))[[:space:]]+(.+) ]]; then
    TYPE="${BASH_REMATCH[2]}"
    DESCRIPTION="${BASH_REMATCH[3]}"
    
    # Check if the type is valid
    if is_valid_type "$TYPE"; then
        # Additional validation: description should not be empty or too generic
        if [[ -z "$DESCRIPTION" ]] || [[ "$DESCRIPTION" =~ ^[[:space:]]*$ ]]; then
            echo -e "${RED}✗ Commit message error:${NC} Description cannot be empty"
            echo ""
            echo -e "${YELLOW}Format:${NC} (type) Brief description of changes #issue_number"
            exit 1
        fi
        
        # Warn about generic descriptions
        if [[ "$DESCRIPTION" =~ ^(Initial plan|Update files|Fixed stuff|WIP|wip)$ ]]; then
            echo -e "${YELLOW}⚠ Warning:${NC} Commit message is too generic: '$DESCRIPTION'"
            echo -e "${YELLOW}Consider:${NC} Using a more descriptive message"
            echo ""
            echo "Good examples:"
            echo "  (fix) resolve memory leak in MQTT connector"
            echo "  (feat) add WiFi reconnection logic"
            echo "  (docs) update README with installation steps"
            # Allow but warn
        fi
        
        echo -e "${GREEN}✓${NC} Commit message format is valid"
        exit 0
    else
        echo -e "${RED}✗ Commit message error:${NC} Invalid commit type '${TYPE}'"
        echo ""
        echo -e "${YELLOW}Valid types:${NC}"
        for valid_type in "${VALID_TYPES[@]}"; do
            echo "  - (${valid_type})"
        done
        echo ""
        echo -e "${YELLOW}Your message:${NC}"
        echo "  $COMMIT_MSG"
        echo ""
        echo -e "${YELLOW}Suggested format:${NC}"
        # Try to suggest a type based on description keywords
        SUGGESTED_TYPE=""
        if [[ $DESCRIPTION =~ (add|implement|create|new) ]]; then
            SUGGESTED_TYPE="feat"
        elif [[ $DESCRIPTION =~ (fix|resolve|correct|patch) ]]; then
            SUGGESTED_TYPE="fix"
        elif [[ $DESCRIPTION =~ (update|change|modify).*(README|doc|comment) ]]; then
            SUGGESTED_TYPE="docs"
        elif [[ $DESCRIPTION =~ (refactor|restructure|reorganize) ]]; then
            SUGGESTED_TYPE="refactor"
        elif [[ $DESCRIPTION =~ (test|spec) ]]; then
            SUGGESTED_TYPE="test"
        elif [[ $DESCRIPTION =~ (performance|optimize|speed) ]]; then
            SUGGESTED_TYPE="perf"
        else
            SUGGESTED_TYPE="chore"
        fi
        echo "  ($SUGGESTED_TYPE) $DESCRIPTION"
        exit 1
    fi
else
    # Message doesn't match the required format
    echo -e "${RED}✗ Commit message error:${NC} Message does not follow the required format"
    echo ""
    echo -e "${YELLOW}Required format:${NC}"
    echo "  (type) Brief description of changes #issue_number"
    echo ""
    echo -e "${YELLOW}Valid types:${NC}"
    for valid_type in "${VALID_TYPES[@]}"; do
        echo "  - (${valid_type})"
    done
    echo ""
    echo -e "${YELLOW}Your message:${NC}"
    echo "  $COMMIT_MSG"
    echo ""
    echo -e "${YELLOW}Examples:${NC}"
    echo "  (fix) resolve memory leak in MQTT connector #123"
    echo "  (feat) add WiFi reconnection logic"
    echo "  (docs) update README with installation steps"
    echo "  (chore) update dependency versions"
    echo "  (perf) optimize memory usage in component"
    echo "  (refactor) simplify authentication logic"
    echo "  (test) add unit tests for config provider"
    echo ""
    
    # Try to suggest a proper format
    SUGGESTED_TYPE="chore"
    if [[ $COMMIT_MSG =~ (add|implement|create|new) ]]; then
        SUGGESTED_TYPE="feat"
    elif [[ $COMMIT_MSG =~ (fix|resolve|correct|patch) ]]; then
        SUGGESTED_TYPE="fix"
    elif [[ $COMMIT_MSG =~ (README|doc|comment|documentation) ]]; then
        SUGGESTED_TYPE="docs"
    elif [[ $COMMIT_MSG =~ (refactor|restructure|reorganize) ]]; then
        SUGGESTED_TYPE="refactor"
    elif [[ $COMMIT_MSG =~ (test|spec) ]]; then
        SUGGESTED_TYPE="test"
    elif [[ $COMMIT_MSG =~ (performance|optimize|speed) ]]; then
        SUGGESTED_TYPE="perf"
    fi
    
    echo -e "${BLUE}Suggested format for your message:${NC}"
    echo "  ($SUGGESTED_TYPE) $COMMIT_MSG"
    echo ""
    
    exit 1
fi
