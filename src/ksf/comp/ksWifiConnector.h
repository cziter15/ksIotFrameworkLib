/*
 *	Copyright (c) 2021-2023, Krzysztof Strehlau
 *
 *	This file is a part of the ksIotFramework library.
 *	All licensing information can be found inside LICENSE.md file.
 *
 *	https://github.com/cziter15/ksIotFrameworkLib/blob/master/LICENSE
 */

#pragma once

#include "../evt/ksEvent.h"
#include "../ksComponent.h"
#include "../ksSimpleTimer.h"

namespace ksf::comps
{
	class ksWifiConnector : public ksComponent
	{
		KSF_RTTI_DECLARATIONS(ksWifiConnector, ksComponent)
		
		protected:
			ksSimpleTimer wifiTimeoutTimer{KSF_WIFI_TIMEOUT_MS};				//!< Wifi timer - timeout.
			ksSimpleTimer wifiReconnectTimer{KSF_WIFI_RECONNECT_TIME_MS};		//!< Wifi timer - reconnect.
			ksSimpleTimer wifiIpCheckTimer{KSF_ONE_SEC_MS};						//!< Wifi timer - IP check.

			bool wasConnected : 1 {false};										//!< True if connected in previous loop.
			bool gotIpAddress : 1{false};										//!< True if IP address is set.
			bool savePower : 1 {true};											//!< True to save power.

			/*!
				@brief Internal method to setup MAC address.
				
				This MAC is generated by using original ChipID / MAC, but starts with 0xFA 0xF1 and then there are four Chip ID bytes.
				0xFA 0xF1 works like prefix / signature to help identyfying devices in router properties / Wireshark (debugging) etc.
			*/
			void setupMacAddress();

			/*!
				@brief Internal method called on WiFi connection.
			*/
			void wifiConnectedInternal();

			/*!
				@brief Internal method called on WiFi disconnection.
			*/
			void wifiDisconnectedInternal();

		public:
			DECLARE_KS_EVENT(onConnected)									// onConnected event that user can bind to.
			DECLARE_KS_EVENT(onDisconnected)								// onDisconnected event that user can bind to.

			/*!
				@brief Constructor for WiFi connector component.
				@param hostname Hostname to be used by WiFi class
				@param savePower True to save power
			*/
			ksWifiConnector(const char* hostname, bool savePower = true);

			/*!
				@brief Initializes WiFi connector component.
				@param owner Pointer to ksApplication object that owns this component
				@return True on success, false on fail.
			*/
			bool init(ksApplication* app) override;

			/*!
				@brief Handles WiFi connector component loop logic.
				@return True on success, false on fail.
			*/
			bool loop(ksApplication* app) override;

			/*!
				@brief Returns whether WiFi is connected or not.
				@return True if connected. False otherwise.
			*/
			bool isConnected() const;

			/*!
				@brief Destructor for WiFi connector component.
			*/
			virtual ~ksWifiConnector();
	};
}